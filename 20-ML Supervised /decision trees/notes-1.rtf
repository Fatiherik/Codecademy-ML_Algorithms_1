{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red164\green191\blue255;\red23\green23\blue23;\red255\green255\blue255;
\red252\green115\blue96;\red254\green219\blue112;\red129\green131\blue134;\red117\green255\blue242;}
{\*\expandedcolortbl;;\cssrgb\c70196\c80000\c100000;\cssrgb\c11765\c11765\c11765;\cssrgb\c100000\c100000\c100000;
\cssrgb\c100000\c53725\c45098;\cssrgb\c100000\c87843\c51373;\cssrgb\c57647\c58431\c59608;\cssrgb\c51373\c100000\c96078;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15100\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \'97 
\f1\fs28\fsmilli14080 \cf2 \cb3 \expnd0\expndtw0\kerning0
from\cf4  \cf5 tree\cf4  \cf2 import\cf4  \cf5 tree\cf4 , \cf5 classify\cf4 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 car\cf4 =[\cf6 'high'\cf4 ,\cf6 'med'\cf4 , \cf6 '3'\cf4 , \cf6 '4'\cf4 , \cf6 'big'\cf4 , \cf6 'high'\cf4 ]\cb1 \
\
\cb3 print(\cf5 classify\cf4 (\cf5 car\cf4 ,\cf5 tree\cf4 ))\cb1 \
\
\'97\cf2 \cb3 from\cf4  \cf5 collections\cf4  \cf2 import\cf4  \cf5 Counter\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \cb3 #labels = ["unacc", "unacc", "acc", "acc", "good", "good"]\cf4 \cb1 \
\cf7 \cb3 #labels = ["unacc","unacc","unacc", "good", "vgood", "vgood"]\cf4 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 labels\cf4  = [\cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 ]\cb1 \
\
\cf5 \cb3 impurity\cf4 =\cf5 1\cf4 \cb1 \
\cf5 \cb3 label_counts\cf4 =\cf5 Counter\cf4 (\cf5 labels\cf4 )\cb1 \
\cb3 print(\cf5 label_counts\cf4 )\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 for\cf4  \cf5 label\cf4  \cf2 in\cf4  \cf5 label_counts\cf4 :\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf5 probability_of_label\cf4 =\cf5 label_counts\cf4 [\cf5 label\cf4 ]/len(\cf5 labels\cf4 )\cb1 \
\cb3   \cf5 impurity\cf4 -=(\cf5 probability_of_label\cf4 )**\cf5 2\cf4 \cb1 \
\cb3 print(\cf5 impurity\cf4 )\cb1 \
\
\'97\cf2 \cb3 from\cf4  \cf5 collections\cf4  \cf2 import\cf4  \cf5 Counter\cf4 \cb1 \
\
\cf5 \cb3 unsplit_labels\cf4  = [\cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "good"\cf4 , \cf6 "good"\cf4 , \cf6 "good"\cf4 , \cf6 "good"\cf4 , \cf6 "vgood"\cf4 , \cf6 "vgood"\cf4 , \cf6 "vgood"\cf4 ]\cb1 \
\
\cf5 \cb3 split_labels_1\cf4  = [\cb1 \
\cb3   [\cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "good"\cf4 , \cf6 "good"\cf4 , \cf6 "vgood"\cf4 ], \cb1 \
\cb3   [ \cf6 "good"\cf4 , \cf6 "good"\cf4 ], \cb1 \
\cb3   [\cf6 "vgood"\cf4 , \cf6 "vgood"\cf4 ]\cb1 \
\cb3 ]\cb1 \
\
\cf5 \cb3 split_labels_2\cf4  = [\cb1 \
\cb3   [\cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 ,\cf6 "unacc"\cf4 , \cf6 "unacc"\cf4 , \cf6 "good"\cf4 , \cf6 "good"\cf4 , \cf6 "good"\cf4 , \cf6 "good"\cf4 ], \cb1 \
\cb3   [\cf6 "vgood"\cf4 , \cf6 "vgood"\cf4 , \cf6 "vgood"\cf4 ]\cb1 \
\cb3 ]\cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 def gini\cf4 (\cf5 dataset\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf5 impurity\cf4  = \cf5 1\cf4 \cb1 \
\cb3   \cf5 label_counts\cf4  = \cf5 Counter\cf4 (\cf5 dataset\cf4 )\cb1 \
\cb3   \cf2 for\cf4  \cf5 label\cf4  \cf2 in\cf4  \cf5 label_counts\cf4 :\cb1 \
\cb3     \cf5 prob_of_label\cf4  = \cf5 label_counts\cf4 [\cf5 label\cf4 ] / len(\cf5 dataset\cf4 )\cb1 \
\cb3     \cf5 impurity\cf4  -= \cf5 prob_of_label\cf4  ** \cf5 2\cf4 \cb1 \
\cb3   \cf2 return\cf4  \cf5 impurity\cf4 \cb1 \
\
\cf5 \cb3 info_gain\cf4 =\cf5 gini\cf4 (\cf5 unsplit_labels\cf4 )\cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 for\cf4  \cf5 i\cf4  \cf2 in\cf4  \cf5 split_labels_2\cf4 :\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf5 info_gain\cf4 -= \cf5 gini\cf4 (\cf5 i\cf4 )\cb1 \
\cb3 print(\cf5 info_gain\cf4 )\
\
\'97 \cf2 from\cf4  \cf5 collections\cf4  \cf2 import\cf4  \cf5 Counter\cf4 \cb1 \
\
\cf5 \cb3 cars\cf4  = [[\cf6 'med'\cf4 , \cf6 'low'\cf4 , \cf6 '3'\cf4 , \cf6 '4'\cf4 , \cf6 'med'\cf4 , \cf6 'med'\cf4 ], [\cf6 'med'\cf4 , \cf6 'vhigh'\cf4 , \cf6 '4'\cf4 , \cf6 'more'\cf4 , \cf6 'small'\cf4 , \cf6 'high'\cf4 ], [\cf6 'high'\cf4 , \cf6 'med'\cf4 , \cf6 '3'\cf4 , \cf6 '2'\cf4 , \cf6 'med'\cf4 , \cf6 'low'\cf4 ], [\cf6 'med'\cf4 , \cf6 'low'\cf4 , \cf6 '4'\cf4 , \cf6 '4'\cf4 , \cf6 'med'\cf4 , \cf6 'low'\cf4 ], [\cf6 'med'\cf4 , \cf6 'low'\cf4 , \cf6 '5more'\cf4 , \cf6 '2'\cf4 , \cf6 'big'\cf4 , \cf6 'med'\cf4 ], [\cf6 'med'\cf4 , \cf6 'med'\cf4 , \cf6 '2'\cf4 , \cf6 'more'\cf4 , \cf6 'big'\cf4 , \cf6 'high'\cf4 ], [\cf6 'med'\cf4 , \cf6 'med'\cf4 , \cf6 '2'\cf4 , \cf6 'more'\cf4 , \cf6 'med'\cf4 , \cf6 'med'\cf4 ], [\cf6 'vhigh'\cf4 , \cf6 'vhigh'\cf4 , \cf6 '2'\cf4 , \cf6 '2'\cf4 , \cf6 'med'\cf4 , \cf6 'low'\cf4 ], [\cf6 'high'\cf4 , \cf6 'med'\cf4 , \cf6 '4'\cf4 , \cf6 '2'\cf4 , \cf6 'big'\cf4 , \cf6 'low'\cf4 ], [\cf6 'low'\cf4 , \cf6 'low'\cf4 , \cf6 '2'\cf4 , \cf6 '4'\cf4 , \cf6 'big'\cf4 , \cf6 'med'\cf4 ]]\cb1 \
\
\cf5 \cb3 car_labels\cf4  = [\cf6 'acc'\cf4 , \cf6 'acc'\cf4 , \cf6 'unacc'\cf4 , \cf6 'unacc'\cf4 , \cf6 'unacc'\cf4 , \cf6 'vgood'\cf4 , \cf6 'acc'\cf4 , \cf6 'unacc'\cf4 , \cf6 'unacc'\cf4 , \cf6 'good'\cf4 ]\cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 def split\cf4 (\cf5 dataset\cf4 , \cf5 labels\cf4 , \cf5 column\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3     \cf5 data_subsets\cf4  = []\cb1 \
\cb3     \cf5 label_subsets\cf4  = []\cb1 \
\cb3     \cf5 counts\cf4  = list(set([\cf5 data\cf4 [\cf5 column\cf4 ] \cf2 for\cf4  \cf5 data\cf4  \cf2 in\cf4  \cf5 dataset\cf4 ]))\cb1 \
\cb3     \cf5 counts\cf4 .\cf8 sort\cf4 ()\cb1 \
\cb3     \cf2 for\cf4  \cf5 k\cf4  \cf2 in\cf4  \cf5 counts\cf4 :\cb1 \
\cb3         \cf5 new_data_subset\cf4  = []\cb1 \
\cb3         \cf5 new_label_subset\cf4  = []\cb1 \
\cb3         \cf2 for\cf4  \cf5 i\cf4  \cf2 in\cf4  range(len(\cf5 dataset\cf4 )):\cb1 \
\cb3             \cf2 if\cf4  \cf5 dataset\cf4 [\cf5 i\cf4 ][\cf5 column\cf4 ] == \cf5 k\cf4 :\cb1 \
\cb3                 \cf5 new_data_subset\cf4 .\cf8 append\cf4 (\cf5 dataset\cf4 [\cf5 i\cf4 ])\cb1 \
\cb3                 \cf5 new_label_subset\cf4 .\cf8 append\cf4 (\cf5 labels\cf4 [\cf5 i\cf4 ])\cb1 \
\cb3         \cf5 data_subsets\cf4 .\cf8 append\cf4 (\cf5 new_data_subset\cf4 )\cb1 \
\cb3         \cf5 label_subsets\cf4 .\cf8 append\cf4 (\cf5 new_label_subset\cf4 )\cb1 \
\cb3     \cf2 return\cf4  \cf5 data_subsets\cf4 , \cf5 label_subsets\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 def gini\cf4 (\cf5 dataset\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf5 impurity\cf4  = \cf5 1\cf4 \cb1 \
\cb3   \cf5 label_counts\cf4  = \cf5 Counter\cf4 (\cf5 dataset\cf4 )\cb1 \
\cb3   \cf2 for\cf4  \cf5 label\cf4  \cf2 in\cf4  \cf5 label_counts\cf4 :\cb1 \
\cb3     \cf5 prob_of_label\cf4  = \cf5 label_counts\cf4 [\cf5 label\cf4 ] / len(\cf5 dataset\cf4 )\cb1 \
\cb3     \cf5 impurity\cf4  -= \cf5 prob_of_label\cf4  ** \cf5 2\cf4 \cb1 \
\cb3   \cf2 return\cf4  \cf5 impurity\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 def information_gain\cf4 (\cf5 starting_labels\cf4 , \cf5 split_labels\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf5 info_gain\cf4  = \cf5 gini\cf4 (\cf5 starting_labels\cf4 )\cb1 \
\cb3   \cf2 for\cf4  \cf5 subset\cf4  \cf2 in\cf4  \cf5 split_labels\cf4 :\cb1 \
\cb3     \cf7 # Multiply gini(subset) by the correct percentage below\cf4 \cb1 \
\cb3     \cf5 info_gain\cf4  -= (len(\cf5 subset\cf4 )/len(\cf5 starting_labels\cf4 ))*\cf5 gini\cf4 (\cf5 subset\cf4 )\cb1 \
\cb3   \cf2 return\cf4  \cf5 info_gain\cf4 \cb1 \
\
\cf5 \cb3 split_data\cf4 ,\cf5 split_labels\cf4 =\cf5 split\cf4 (\cf5 cars\cf4 ,\cf5 car_labels\cf4 ,\cf5 3\cf4 )\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \cb3 #print(split_data)\cf4 \cb1 \
\cf7 \cb3 #print(split_data[0])\cf4 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 for\cf4  \cf5 i\cf4  \cf2 in\cf4  range(\cf5 0\cf4 ,\cf5 6\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf5 split_data\cf4 ,\cf5 split_labels\cf4 =\cf5 split\cf4 (\cf5 cars\cf4 ,\cf5 car_labels\cf4 ,\cf5 i\cf4 )\cb1 \
\cb3   print(\cf5 information_gain\cf4 (\cf5 car_labels\cf4 , \cf5 split_labels\cf4 ))\cb1 \
\
\
\'97\cf2 \cb3 from\cf4  \cf5 tree\cf4  \cf2 import\cf4  *\cb1 \
\
\cf5 \cb3 car_data\cf4  = [[\cf6 'med'\cf4 , \cf6 'low'\cf4 , \cf6 '3'\cf4 , \cf6 '4'\cf4 , \cf6 'med'\cf4 , \cf6 'med'\cf4 ], [\cf6 'med'\cf4 , \cf6 'vhigh'\cf4 , \cf6 '4'\cf4 , \cf6 'more'\cf4 , \cf6 'small'\cf4 , \cf6 'high'\cf4 ], [\cf6 'high'\cf4 , \cf6 'med'\cf4 , \cf6 '3'\cf4 , \cf6 '2'\cf4 , \cf6 'med'\cf4 , \cf6 'low'\cf4 ], [\cf6 'med'\cf4 , \cf6 'low'\cf4 , \cf6 '4'\cf4 , \cf6 '4'\cf4 , \cf6 'med'\cf4 , \cf6 'low'\cf4 ], [\cf6 'med'\cf4 , \cf6 'low'\cf4 , \cf6 '5more'\cf4 , \cf6 '2'\cf4 , \cf6 'big'\cf4 , \cf6 'med'\cf4 ], [\cf6 'med'\cf4 , \cf6 'med'\cf4 , \cf6 '2'\cf4 , \cf6 'more'\cf4 , \cf6 'big'\cf4 , \cf6 'high'\cf4 ], [\cf6 'med'\cf4 , \cf6 'med'\cf4 , \cf6 '2'\cf4 , \cf6 'more'\cf4 , \cf6 'med'\cf4 , \cf6 'med'\cf4 ], [\cf6 'vhigh'\cf4 , \cf6 'vhigh'\cf4 , \cf6 '2'\cf4 , \cf6 '2'\cf4 , \cf6 'med'\cf4 , \cf6 'low'\cf4 ], [\cf6 'high'\cf4 , \cf6 'med'\cf4 , \cf6 '4'\cf4 , \cf6 '2'\cf4 , \cf6 'big'\cf4 , \cf6 'low'\cf4 ], [\cf6 'low'\cf4 , \cf6 'low'\cf4 , \cf6 '2'\cf4 , \cf6 '4'\cf4 , \cf6 'big'\cf4 , \cf6 'med'\cf4 ]]\cb1 \
\
\cf5 \cb3 car_labels\cf4  = [\cf6 'acc'\cf4 , \cf6 'acc'\cf4 , \cf6 'unacc'\cf4 , \cf6 'unacc'\cf4 , \cf6 'unacc'\cf4 , \cf6 'vgood'\cf4 , \cf6 'acc'\cf4 , \cf6 'unacc'\cf4 , \cf6 'unacc'\cf4 , \cf6 'good'\cf4 ]\cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 def find_best_split\cf4 (\cf5 dataset\cf4 , \cf5 labels\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3     \cf5 best_gain\cf4  = \cf5 0\cf4 \cb1 \
\cb3     \cf5 best_feature\cf4  = \cf5 0\cf4 \cb1 \
\cb3     \cf2 for\cf4  \cf5 feature\cf4  \cf2 in\cf4  range(len(\cf5 dataset\cf4 [\cf5 0\cf4 ])):\cb1 \
\cb3         \cf5 data_subsets\cf4 , \cf5 label_subsets\cf4  = \cf5 split\cf4 (\cf5 dataset\cf4 , \cf5 labels\cf4 , \cf5 feature\cf4 )\cb1 \
\cb3         \cf5 gain\cf4  = \cf5 information_gain\cf4 (\cf5 labels\cf4 , \cf5 label_subsets\cf4 )\cb1 \
\cb3         \cf2 if\cf4  \cf5 gain\cf4  \cf5 >\cf4  \cf5 best_gain\cf4 :\cb1 \
\cb3             \cf5 best_gain\cf4 , \cf5 best_feature\cf4  = \cf5 gain\cf4 , \cf5 feature\cf4 \cb1 \
\cb3     \cf2 return\cf4  \cf5 best_feature\cf4 , \cf5 best_gain\cf4 \cb1 \
\
\cf5 \cb3 best_feature\cf4 , \cf5 best_gain\cf4 =\cf5 find_best_split\cf4 (\cf5 car_data\cf4 ,\cf5 car_labels\cf4 )\cb1 \
\
\cb3 print(\cf5 best_feature\cf4 , \cf5 best_gain\cf4 )\cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 def build_tree\cf4 (\cf5 data\cf4 , \cf5 labels\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf5 best_feature\cf4 , \cf5 best_gain\cf4 =\cf5 find_best_split\cf4 (\cf5 data\cf4 , \cf5 labels\cf4 )\cb1 \
\cb3   \cf2 if\cf4  \cf5 best_gain\cf4 ==\cf5 0\cf4 :\cb1 \
\cb3     \cf2 return\cf4  \cf5 Counter\cf4 (\cf5 labels\cf4 )\cb1 \
\cb3   \cf5 data_subsets\cf4 , \cf5 label_subsets\cf4  = \cf5 split\cf4 (\cf5 data\cf4 , \cf5 labels\cf4 , \cf5 best_feature\cf4 )\cb1 \
\cb3   \cf5 branches\cf4 =[]\cb1 \
\cb3   \cf2 for\cf4  \cf5 i\cf4  \cf2 in\cf4  range(len(\cf5 data_subsets\cf4 )):\cb1 \
\cb3     \cf5 branch\cf4 =\cf5 build_tree\cf4 (\cf5 data_subsets\cf4 [\cf5 i\cf4 ],\cf5 label_subsets\cf4 [\cf5 i\cf4 ])\cb1 \
\cb3     \cf5 branches\cf4 .\cf8 append\cf4 (\cf5 branch\cf4 )\cb1 \
\cb3   \cf2 return\cf4  \cf5 branches\cf4 \cb1 \
\cb3   \cb1 \
\cf5 \cb3 tree\cf4 =\cf5 build_tree\cf4 (\cf5 car_data\cf4 , \cf5 car_labels\cf4 )\cb1 \
\
\cf5 \cb3 print_tree\cf4 (\cf5 tree\cf4 )\cb1 \
\
\'97\cf2 \cb3 from\cf4  \cf5 tree\cf4  \cf2 import\cf4  *\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 import\cf4  \cf5 operator\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 test_point\cf4  = [\cf6 'vhigh'\cf4 , \cf6 'low'\cf4 , \cf6 '3'\cf4 , \cf6 '4'\cf4 , \cf6 'med'\cf4 , \cf6 'med'\cf4 ]\cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 def classify\cf4 (\cf5 datapoint\cf4 , \cf5 tree\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 if\cf4  isinstance(\cf5 tree\cf4 , \cf5 Leaf\cf4 ):\cb1 \
\cb3     \cf2 return\cf4  max(\cf5 tree\cf4 .\cf8 labels\cf5 .\cf8 items\cf4 (), \cf5 key\cf4 =\cf5 operator\cf4 .\cf8 itemgetter\cf4 (\cf5 1\cf4 ))[\cf5 0\cf4 ]\cb1 \
\
\cb3   \cf5 value\cf4  = \cf5 datapoint\cf4 [\cf5 tree\cf4 .\cf8 feature\cf4 ]\cb1 \
\cb3   \cf2 for\cf4  \cf5 branch\cf4  \cf2 in\cf4  \cf5 tree\cf4 .\cf8 branches\cf4 :\cb1 \
\cb3     \cf2 if\cf4  \cf5 branch\cf4 .\cf8 value\cf4  == \cf5 value\cf4 :\cb1 \
\cb3       \cf2 return\cf4  \cf5 classify\cf4 (\cf5 datapoint\cf4 , \cf5 branch\cf4 )\cb1 \
\
\cb3 print(\cf5 classify\cf4 (\cf5 test_point\cf4 , \cf5 tree\cf4 ))\cb1 \
\
\'97\cf2 \cb3 from\cf4  \cf5 cars\cf4  \cf2 import\cf4  \cf5 training_points\cf4 , \cf5 training_labels\cf4 , \cf5 testing_points\cf4 , \cf5 testing_labels\cf4 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 from\cf4  \cf5 sklearn\cf4 .\cf8 tree\cf4  \cf2 import\cf4  \cf5 DecisionTreeClassifier\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \cb3 #print(training_points[0])\cf4 \cb1 \
\cf7 \cb3 #print(training_labels[0])\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 classifier\cf4  = \cf5 DecisionTreeClassifier\cf4 ()\cb1 \
\cf5 \cb3 classifier\cf4 .\cf8 fit\cf4 (\cf5 training_points\cf4 ,\cf5 training_labels\cf4 )\cb1 \
\
\cb3 print(\cf5 classifier\cf4 .\cf8 score\cf4 (\cf5 testing_points\cf4 ,\cf5 testing_labels\cf4 ))\
\
\
\'97\cf2 from\cf4  \cf5 cars\cf4  \cf2 import\cf4  \cf5 training_points\cf4 , \cf5 training_labels\cf4 , \cf5 testing_points\cf4 , \cf5 testing_labels\cf4 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 from\cf4  \cf5 sklearn\cf4 .\cf8 tree\cf4  \cf2 import\cf4  \cf5 DecisionTreeClassifier\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 classifier\cf4  = \cf5 DecisionTreeClassifier\cf4 (\cf5 random_state\cf4  = \cf5 0\cf4 , \cf5 max_depth\cf4 =\cf5 11\cf4 )				max_depth 12 idi, 11 haptic, accuracy artti\cb1 \
\cf5 \cb3 classifier\cf4 .\cf8 fit\cf4 (\cf5 training_points\cf4 , \cf5 training_labels\cf4 )\cb1 \
\cb3 print(\cf5 classifier\cf4 .\cf8 score\cf4 (\cf5 testing_points\cf4 , \cf5 testing_labels\cf4 ))\cb1 \
\
\cb3 print(\cf5 classifier\cf4 .\cf8 tree_\cf5 .\cf8 max_depth\cf4 )\cb1 \
\
\
\
}