{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red164\green191\blue255;\red23\green23\blue23;\red255\green255\blue255;
\red252\green115\blue96;\red117\green255\blue242;\red129\green131\blue134;\red254\green219\blue112;}
{\*\expandedcolortbl;;\cssrgb\c70196\c80000\c100000;\cssrgb\c11765\c11765\c11765;\cssrgb\c100000\c100000\c100000;
\cssrgb\c100000\c53725\c45098;\cssrgb\c51373\c100000\c96078;\cssrgb\c57647\c58431\c59608;\cssrgb\c100000\c87843\c51373;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \'97
\f1\fs28\fsmilli14080 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 from\cf4 \strokec4  \cf5 \strokec5 tree\cf4 \strokec4  \cf2 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 build_tree\cf4 \strokec4 , \cf5 \strokec5 print_tree\cf4 \strokec4 , \cf5 \strokec5 car_data\cf4 \strokec4 , \cf5 \strokec5 car_labels\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 random\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 \strokec5 random\cf4 \strokec4 .\cf6 \strokec6 seed\cf4 \strokec4 (\cf5 \strokec5 4\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 tree\cf4 \strokec4 =\cf5 \strokec5 build_tree\cf4 \strokec4 (\cf5 \strokec5 car_data\cf4 \strokec4 , \cf5 \strokec5 car_labels\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \cb3 \strokec7 #print_tree(tree)\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 \strokec5 indices\cf4 \strokec4 =[\cf5 \strokec5 random\cf4 \strokec4 .\cf6 \strokec6 randint\cf4 \strokec4 (\cf5 \strokec5 0\cf4 \strokec4 ,\cf5 \strokec5 999\cf4 \strokec4 ) \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  range(\cf5 \strokec5 1000\cf4 \strokec4 )]\cb1 \
\
\cf5 \cb3 \strokec5 data_subset\cf4 \strokec4 =[\cf5 \strokec5 car_data\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ] \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 indices\cf4 \strokec4 ]\cb1 \
\cf5 \cb3 \strokec5 labels_subset\cf4 \strokec4 =[\cf5 \strokec5 car_labels\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ] \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 indices\cf4 \strokec4 ]\cb1 \
\
\cf5 \cb3 \strokec5 subset_tree\cf4 \strokec4 =\cf5 \strokec5 build_tree\cf4 \strokec4 (\cf5 \strokec5 data_subset\cf4 \strokec4 , \cf5 \strokec5 labels_subset\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 print_tree\cf4 \strokec4 (\cf5 \strokec5 subset_tree\cf4 \strokec4 )\cb1 \
\
\'97 \cf2 \cb3 \strokec2 from\cf4 \strokec4  \cf5 \strokec5 tree\cf4 \strokec4  \cf2 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 car_data\cf4 \strokec4 , \cf5 \strokec5 car_labels\cf4 \strokec4 , \cf5 \strokec5 split\cf4 \strokec4 , \cf5 \strokec5 information_gain\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 random\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 numpy\cf4 \strokec4  \cf2 \strokec2 as\cf4 \strokec4  \cf5 \strokec5 np\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 np\cf4 \strokec4 .\cf6 \strokec6 random\cf5 \strokec5 .\cf6 \strokec6 seed\cf4 \strokec4 (\cf5 \strokec5 1\cf4 \strokec4 )\cb1 \
\cf5 \cb3 \strokec5 random\cf4 \strokec4 .\cf6 \strokec6 seed\cf4 \strokec4 (\cf5 \strokec5 4\cf4 \strokec4 )\cb1 \
\
\cf2 \cb3 \strokec2 def find_best_split\cf4 \strokec4 (\cf5 \strokec5 dataset\cf4 \strokec4 , \cf5 \strokec5 labels\cf4 \strokec4 ):\cb1 \
\cb3     \cf5 \strokec5 best_gain\cf4 \strokec4  = \cf5 \strokec5 0\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 best_feature\cf4 \strokec4  = \cf5 \strokec5 0\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 #Create features here\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 features\cf4 \strokec4 = \cf5 \strokec5 np\cf4 \strokec4 .\cf6 \strokec6 random\cf5 \strokec5 .\cf6 \strokec6 choice\cf4 \strokec4 (len(\cf5 \strokec5 dataset\cf4 \strokec4 [\cf5 \strokec5 0\cf4 \strokec4 ]),\cf5 \strokec5 3\cf4 \strokec4 , \cf5 \strokec5 replace\cf4 \strokec4  = \cf2 \strokec2 False\cf4 \strokec4 )\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 feature\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 features\cf4 \strokec4 :\cb1 \
\cb3         \cf5 \strokec5 data_subsets\cf4 \strokec4 , \cf5 \strokec5 label_subsets\cf4 \strokec4  = \cf5 \strokec5 split\cf4 \strokec4 (\cf5 \strokec5 dataset\cf4 \strokec4 , \cf5 \strokec5 labels\cf4 \strokec4 , \cf5 \strokec5 feature\cf4 \strokec4 )\cb1 \
\cb3         \cf5 \strokec5 gain\cf4 \strokec4  = \cf5 \strokec5 information_gain\cf4 \strokec4 (\cf5 \strokec5 labels\cf4 \strokec4 , \cf5 \strokec5 label_subsets\cf4 \strokec4 )\cb1 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 gain\cf4 \strokec4  \cf5 \strokec5 >\cf4 \strokec4  \cf5 \strokec5 best_gain\cf4 \strokec4 :\cb1 \
\cb3             \cf5 \strokec5 best_gain\cf4 \strokec4 , \cf5 \strokec5 best_feature\cf4 \strokec4  = \cf5 \strokec5 gain\cf4 \strokec4 , \cf5 \strokec5 feature\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 best_gain\cf4 \strokec4 , \cf5 \strokec5 best_feature\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cf5 \cb3 \strokec5 indices\cf4 \strokec4  = [\cf5 \strokec5 random\cf4 \strokec4 .\cf6 \strokec6 randint\cf4 \strokec4 (\cf5 \strokec5 0\cf4 \strokec4 , \cf5 \strokec5 999\cf4 \strokec4 ) \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  range(\cf5 \strokec5 1000\cf4 \strokec4 )]\cb1 \
\
\cf5 \cb3 \strokec5 data_subset\cf4 \strokec4  = [\cf5 \strokec5 car_data\cf4 \strokec4 [\cf5 \strokec5 index\cf4 \strokec4 ] \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 index\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 indices\cf4 \strokec4 ]\cb1 \
\cf5 \cb3 \strokec5 labels_subset\cf4 \strokec4  = [\cf5 \strokec5 car_labels\cf4 \strokec4 [\cf5 \strokec5 index\cf4 \strokec4 ] \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 index\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 indices\cf4 \strokec4 ]\cb1 \
\
\cb3 print(\cf5 \strokec5 find_best_split\cf4 \strokec4 (\cf5 \strokec5 data_subset\cf4 \strokec4 , \cf5 \strokec5 labels_subset\cf4 \strokec4 ))\
\
\'97\cf2 \strokec2 from\cf4 \strokec4  \cf5 \strokec5 tree\cf4 \strokec4  \cf2 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 build_tree\cf4 \strokec4 , \cf5 \strokec5 print_tree\cf4 \strokec4 , \cf5 \strokec5 car_data\cf4 \strokec4 , \cf5 \strokec5 car_labels\cf4 \strokec4 , \cf5 \strokec5 classify\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 random\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 random\cf4 \strokec4 .\cf6 \strokec6 seed\cf4 \strokec4 (\cf5 \strokec5 4\cf4 \strokec4 )\cb1 \
\
\cf7 \cb3 \strokec7 # The features are the price of the car, the cost of maintenance, the number of doors, the number of people the car can hold, the size of the trunk, and the safety rating\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 unlabeled_point\cf4 \strokec4  = [\cf8 \strokec8 'high'\cf4 \strokec4 , \cf8 \strokec8 'vhigh'\cf4 \strokec4 , \cf8 \strokec8 '3'\cf4 \strokec4 , \cf8 \strokec8 'more'\cf4 \strokec4 , \cf8 \strokec8 'med'\cf4 \strokec4 , \cf8 \strokec8 'med'\cf4 \strokec4 ]\cb1 \
\
\cf5 \cb3 \strokec5 predictions\cf4 \strokec4 =[]\cb1 \
\cf2 \cb3 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  range(\cf5 \strokec5 20\cf4 \strokec4 ):\cb1 \
\cb3   \cf5 \strokec5 indices\cf4 \strokec4  = [\cf5 \strokec5 random\cf4 \strokec4 .\cf6 \strokec6 randint\cf4 \strokec4 (\cf5 \strokec5 0\cf4 \strokec4 , \cf5 \strokec5 999\cf4 \strokec4 ) \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  range(\cf5 \strokec5 1000\cf4 \strokec4 )]\cb1 \
\cb3   \cf5 \strokec5 data_subset\cf4 \strokec4  = [\cf5 \strokec5 car_data\cf4 \strokec4 [\cf5 \strokec5 index\cf4 \strokec4 ] \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 index\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 indices\cf4 \strokec4 ]\cb1 \
\cb3   \cf5 \strokec5 labels_subset\cf4 \strokec4  = [\cf5 \strokec5 car_labels\cf4 \strokec4 [\cf5 \strokec5 index\cf4 \strokec4 ] \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 index\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 indices\cf4 \strokec4 ]\cb1 \
\cb3   \cf5 \strokec5 subset_tree\cf4 \strokec4  = \cf5 \strokec5 build_tree\cf4 \strokec4 (\cf5 \strokec5 data_subset\cf4 \strokec4 , \cf5 \strokec5 labels_subset\cf4 \strokec4 )\cb1 \
\
\cb3   \cf5 \strokec5 predictions\cf4 \strokec4 .\cf6 \strokec6 append\cf4 \strokec4 (\cf5 \strokec5 classify\cf4 \strokec4 (\cf5 \strokec5 unlabeled_point\cf4 \strokec4 ,\cf5 \strokec5 subset_tree\cf4 \strokec4 ))\cb1 \
\cb3 print(\cf5 \strokec5 predictions\cf4 \strokec4 )\cb1 \
\cf5 \cb3 \strokec5 final_prediction\cf4 \strokec4 =max(\cf5 \strokec5 predictions\cf4 \strokec4 , \cf5 \strokec5 key\cf4 \strokec4 =\cf5 \strokec5 predictions\cf4 \strokec4 .\cf6 \strokec6 count\cf4 \strokec4 )\cb1 \
\cb3 print(\cf5 \strokec5 final_prediction\cf4 \strokec4 )\
\
\'97\cf2 \strokec2 from\cf4 \strokec4  \cf5 \strokec5 tree\cf4 \strokec4  \cf2 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 training_data\cf4 \strokec4 , \cf5 \strokec5 training_labels\cf4 \strokec4 , \cf5 \strokec5 testing_data\cf4 \strokec4 , \cf5 \strokec5 testing_labels\cf4 \strokec4 , \cf5 \strokec5 make_random_forest\cf4 \strokec4 , \cf5 \strokec5 make_single_tree\cf4 \strokec4 , \cf5 \strokec5 classify\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 numpy\cf4 \strokec4  \cf2 \strokec2 as\cf4 \strokec4  \cf5 \strokec5 np\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 random\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 np\cf4 \strokec4 .\cf6 \strokec6 random\cf5 \strokec5 .\cf6 \strokec6 seed\cf4 \strokec4 (\cf5 \strokec5 1\cf4 \strokec4 )\cb1 \
\cf5 \cb3 \strokec5 random\cf4 \strokec4 .\cf6 \strokec6 seed\cf4 \strokec4 (\cf5 \strokec5 1\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 tree\cf4 \strokec4  = \cf5 \strokec5 make_single_tree\cf4 \strokec4 (\cf5 \strokec5 training_data\cf4 \strokec4 , \cf5 \strokec5 training_labels\cf4 \strokec4 )\cb1 \
\cf5 \cb3 \strokec5 forest\cf4 \strokec4 =\cf5 \strokec5 make_random_forest\cf4 \strokec4 (\cf5 \strokec5 40\cf4 \strokec4 , \cf5 \strokec5 training_data\cf4 \strokec4 , \cf5 \strokec5 training_labels\cf4 \strokec4 )\cb1 \
\cf5 \cb3 \strokec5 single_tree_correct\cf4 \strokec4  = \cf5 \strokec5 0\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 forest_correct\cf4 \strokec4  = \cf5 \strokec5 0\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  range(len(\cf5 \strokec5 testing_data\cf4 \strokec4 )):\cb1 \
\cb3   \cf5 \strokec5 prediction\cf4 \strokec4  = \cf5 \strokec5 classify\cf4 \strokec4 (\cf5 \strokec5 testing_data\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ], \cf5 \strokec5 tree\cf4 \strokec4 )\cb1 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 prediction\cf4 \strokec4  == \cf5 \strokec5 testing_labels\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ]:\cb1 \
\cb3     \cf5 \strokec5 single_tree_correct\cf4 \strokec4  += \cf5 \strokec5 1\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 predictions\cf4 \strokec4 =[]\cb1 \
\cb3   \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 forest_tree\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 forest\cf4 \strokec4 :\cb1 \
\cb3     \cf5 \strokec5 prediction_1\cf4 \strokec4 = \cf5 \strokec5 classify\cf4 \strokec4 (\cf5 \strokec5 testing_data\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ],\cf5 \strokec5 forest_tree\cf4 \strokec4 )\cb1 \
\cb3     \cf5 \strokec5 predictions\cf4 \strokec4 .\cf6 \strokec6 append\cf4 \strokec4 (\cf5 \strokec5 prediction_1\cf4 \strokec4 )\cb1 \
\cb3   \cf5 \strokec5 forest_prediction\cf4 \strokec4  = max(\cf5 \strokec5 predictions\cf4 \strokec4 ,\cf5 \strokec5 key\cf4 \strokec4 =\cf5 \strokec5 predictions\cf4 \strokec4 .\cf6 \strokec6 count\cf4 \strokec4 )\cb1 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 forest_prediction\cf4 \strokec4  == \cf5 \strokec5 testing_labels\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ]:\cb1 \
\cb3     \cf5 \strokec5 forest_correct\cf4 \strokec4  += \cf5 \strokec5 1\cf4 \cb1 \strokec4 \
\
\cb3 print(\cf5 \strokec5 single_tree_correct\cf4 \strokec4 /len(\cf5 \strokec5 testing_data\cf4 \strokec4 ))\cb1 \
\cb3 print(\cf5 \strokec5 forest_correct\cf4 \strokec4 /len(\cf5 \strokec5 testing_data\cf4 \strokec4 ))\cb1 \
\cb3 \
\
\'97\cf2 \strokec2 def warn\cf4 \strokec4 (*\cf5 \strokec5 args\cf4 \strokec4 , **\cf5 \strokec5 kwargs\cf4 \strokec4 ):\cb1 \
\cb3     \cf2 \strokec2 pass\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 warnings\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 warnings\cf4 \strokec4 .\cf6 \strokec6 warn\cf4 \strokec4  = \cf5 \strokec5 warn\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  \cf5 \strokec5 cars\cf4 \strokec4  \cf2 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 training_points\cf4 \strokec4 , \cf5 \strokec5 training_labels\cf4 \strokec4 , \cf5 \strokec5 testing_points\cf4 \strokec4 , \cf5 \strokec5 testing_labels\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 warnings\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  \cf5 \strokec5 sklearn\cf4 \strokec4 .\cf6 \strokec6 ensemble\cf4 \strokec4  \cf2 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 RandomForestClassifier\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 classifier\cf4 \strokec4  = \cf5 \strokec5 RandomForestClassifier\cf4 \strokec4 (\cf5 \strokec5 n_estimators\cf4 \strokec4  = \cf5 \strokec5 2000\cf4 \strokec4 , \cf5 \strokec5 random_state\cf4 \strokec4 =\cf5 \strokec5 0\cf4 \strokec4 )\cb1 \
\
\cf5 \cb3 \strokec5 classifier\cf4 \strokec4 .\cf6 \strokec6 fit\cf4 \strokec4 (\cf5 \strokec5 training_points\cf4 \strokec4 ,\cf5 \strokec5 training_labels\cf4 \strokec4 )\cb1 \
\cb3 print(\cf5 \strokec5 classifier\cf4 \strokec4 .\cf6 \strokec6 score\cf4 \strokec4 (\cf5 \strokec5 testing_points\cf4 \strokec4 , \cf5 \strokec5 testing_labels\cf4 \strokec4 ))\cb1 \
\cb3 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \
\'97 }