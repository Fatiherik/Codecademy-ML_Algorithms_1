{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red252\green115\blue96;\red23\green23\blue23;\red255\green255\blue255;
\red164\green191\blue255;\red117\green255\blue242;\red254\green219\blue112;\red129\green131\blue134;\red56\green56\blue56;
\red17\green16\blue23;\red229\green227\blue232;}
{\*\expandedcolortbl;;\cssrgb\c100000\c53725\c45098;\cssrgb\c11765\c11765\c11765;\cssrgb\c100000\c100000\c100000;
\cssrgb\c70196\c80000\c100000;\cssrgb\c51373\c100000\c96078;\cssrgb\c100000\c87843\c51373;\cssrgb\c57647\c58431\c59608;\cssrgb\c28235\c28235\c28235;
\cssrgb\c8235\c7843\c12157;\cssrgb\c91765\c91373\c92941;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \
\'97 
\f1\fs28\fsmilli14080 \cf2 \cb3 \expnd0\expndtw0\kerning0
star_wars\cf4  = [\cf2 125\cf4 , \cf2 1977\cf4 ]\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 raiders\cf4  = [\cf2 115\cf4 , \cf2 1981\cf4 ]\cb1 \
\cf2 \cb3 mean_girls\cf4  = [\cf2 97\cf4 , \cf2 2004\cf4 ]\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 def distance\cf4 (\cf2 movie1\cf4 ,\cf2 movie2\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 length_difference\cf4  = (\cf2 movie1\cf4 [\cf2 0\cf4 ] - \cf2 movie2\cf4 [\cf2 0\cf4 ]) ** \cf2 2\cf4 \cb1 \
\cb3   \cf2 year_difference\cf4 = (\cf2 movie1\cf4 [\cf2 1\cf4 ] - \cf2 movie2\cf4 [\cf2 1\cf4 ]) ** \cf2 2\cf4 \cb1 \
\cb3   \cf2 distance\cf4  = (\cf2 length_difference\cf4  + \cf2 year_difference\cf4 ) ** \cf2 0.5\cf4 \cb1 \
\cb3   \cf5 return\cf4  \cf2 distance\cf4 \cb1 \
\
\cb3 print(\cf2 distance\cf4 (\cf2 star_wars\cf4 ,\cf2 raiders\cf4 ))\cb1 \
\cb3 print(\cf2 distance\cf4 (\cf2 star_wars\cf4 ,\cf2 mean_girls\cf4 ))\cb1 \
\
\'97 \cf2 \cb3 star_wars\cf4  = [\cf2 125\cf4 , \cf2 1977\cf4 , \cf2 11000000\cf4 ]\cb1 \
\cf2 \cb3 raiders\cf4  = [\cf2 115\cf4 , \cf2 1981\cf4 , \cf2 18000000\cf4 ]\cb1 \
\cf2 \cb3 mean_girls\cf4  = [\cf2 97\cf4 , \cf2 2004\cf4 , \cf2 17000000\cf4 ]\cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 def distance\cf4 (\cf2 movie1\cf4 , \cf2 movie2\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 distance\cf4 =\cf2 0\cf4 \cb1 \
\cb3   \cf5 for\cf4  \cf2 i\cf4  \cf5 in\cf4  range(len(\cf2 movie1\cf4 )):\cb1 \
\cb3     \cf2 distance\cf4 += (\cf2 movie1\cf4 [\cf2 i\cf4 ] - \cf2 movie2\cf4 [\cf2 i\cf4 ]) ** \cf2 2\cf4 \cb1 \
\cb3   \cf5 return\cf4  \cf2 distance\cf4  ** \cf2 0.5\cf4 \cb1 \
\
\cb3 print(\cf2 distance\cf4 (\cf2 star_wars\cf4 ,\cf2 raiders\cf4 ))\cb1 \
\cb3 print(\cf2 distance\cf4 (\cf2 star_wars\cf4 ,\cf2 mean_girls\cf4 ))\cb1 \
\
\
\'97\cf2 \cb3 release_dates\cf4  = [\cf2 1897\cf4 , \cf2 1998\cf4 , \cf2 2000\cf4 , \cf2 1948\cf4 , \cf2 1962\cf4 , \cf2 1950\cf4 , \cf2 1975\cf4 , \cf2 1960\cf4 , \cf2 2017\cf4 , \cf2 1937\cf4 , \cf2 1968\cf4 , \cf2 1996\cf4 , \cf2 1944\cf4 , \cf2 1891\cf4 , \cf2 1995\cf4 , \cf2 1948\cf4 , \cf2 2011\cf4 , \cf2 1965\cf4 , \cf2 1891\cf4 , \cf2 1978\cf4 ]\cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 def min_max_normalize\cf4 (\cf2 lst\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 normalized\cf4 =[]\cb1 \
\cb3   \cf2 minimum\cf4 =min(\cf2 lst\cf4 )\cb1 \
\cb3   \cf2 maximum\cf4 =max(\cf2 lst\cf4 )\cb1 \
\
\cb3   \cf5 for\cf4  \cf2 i\cf4  \cf5 in\cf4  range(len(\cf2 lst\cf4 )):\cb1 \
\cb3     \cf2 lst\cf4 [\cf2 i\cf4 ]=(\cf2 lst\cf4 [\cf2 i\cf4 ]-\cf2 minimum\cf4 )/(\cf2 maximum\cf4 -\cf2 minimum\cf4 )\cb1 \
\cb3     \cf2 normalized\cf4 .\cf6 append\cf4 (\cf2 lst\cf4 [\cf2 i\cf4 ])\cb1 \
\cb3   \cf5 return\cf4  \cf2 normalized\cf4 \cb1 \
\
\cb3 print(\cf2 min_max_normalize\cf4 (\cf2 release_dates\cf4 ))\
\
\'97\cf5 from\cf4  \cf2 movies\cf4  \cf5 import\cf4  \cf2 movie_dataset\cf4 , \cf2 movie_labels\cf4 \cb1 \
\
\cb3 print(\cf2 movie_dataset\cf4 [\cf7 'Bruce Almighty'\cf4 ])\cb1 \
\cb3 print(\cf2 movie_labels\cf4 [\cf7 'Bruce Almighty'\cf4 ])\cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 def distance\cf4 (\cf2 movie1\cf4 , \cf2 movie2\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 squared_difference\cf4  = \cf2 0\cf4 \cb1 \
\cb3   \cf5 for\cf4  \cf2 i\cf4  \cf5 in\cf4  range(len(\cf2 movie1\cf4 )):\cb1 \
\cb3     \cf2 squared_difference\cf4  += (\cf2 movie1\cf4 [\cf2 i\cf4 ] - \cf2 movie2\cf4 [\cf2 i\cf4 ]) ** \cf2 2\cf4 \cb1 \
\cb3   \cf2 final_distance\cf4  = \cf2 squared_difference\cf4  ** \cf2 0.5\cf4 \cb1 \
\cb3   \cf5 return\cf4  \cf2 final_distance\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 def classify\cf4 (\cf2 unknown\cf4 ,\cf2 dataset\cf4 ,\cf2 k\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 distances\cf4 =[]\cb1 \
\cb3   \cf5 for\cf4  \cf2 title\cf4  \cf5 in\cf4  \cf2 dataset\cf4 :\cb1 \
\cb3     \cf2 distance_to_point\cf4 =\cf2 distance\cf4 (\cf2 dataset\cf4 [\cf2 title\cf4 ], \cf2 unknown\cf4 )\cb1 \
\cb3     \cf2 distances\cf4 .\cf6 append\cf4 ([\cf2 distance_to_point\cf4 ,\cf2 title\cf4 ])\cb1 \
\cb3   \cf2 distances\cf4 .\cf6 sort\cf4 ()\cb1 \
\cb3   \cf2 neighbors\cf4 =\cf2 distances\cf4 [:\cf2 k\cf4 ]\cb1 \
\cb3   \cf5 return\cf4  \cf2 neighbors\cf4 \cb1 \
\
\cb3 print(\cf2 classify\cf4 ([\cf2 .4\cf4 , \cf2 .2\cf4 , \cf2 .9\cf4 ],\cf2 movie_dataset\cf4 ,\cf2 5\cf4 ))\cb1 \
\cb3 \
\
\'97\cf5 from\cf4  \cf2 movies\cf4  \cf5 import\cf4  \cf2 movie_dataset\cf4 , \cf2 movie_labels\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 def distance\cf4 (\cf2 movie1\cf4 , \cf2 movie2\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 squared_difference\cf4  = \cf2 0\cf4 \cb1 \
\cb3   \cf5 for\cf4  \cf2 i\cf4  \cf5 in\cf4  range(len(\cf2 movie1\cf4 )):\cb1 \
\cb3     \cf2 squared_difference\cf4  += (\cf2 movie1\cf4 [\cf2 i\cf4 ] - \cf2 movie2\cf4 [\cf2 i\cf4 ]) ** \cf2 2\cf4 \cb1 \
\cb3   \cf2 final_distance\cf4  = \cf2 squared_difference\cf4  ** \cf2 0.5\cf4 \cb1 \
\cb3   \cf5 return\cf4  \cf2 final_distance\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 def classify\cf4 (\cf2 unknown\cf4 , \cf2 dataset\cf4 , \cf2 labels\cf4 , \cf2 k\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 distances\cf4  = []\cb1 \
\cb3   \cf2 num_good\cf4 =\cf2 0\cf4 \cb1 \
\cb3   \cf2 num_bad\cf4 =\cf2 0\cf4 \cb1 \
\cb3   \cf8 #Looping through all points in the dataset\cf4 \cb1 \
\cb3   \cf5 for\cf4  \cf2 title\cf4  \cf5 in\cf4  \cf2 dataset\cf4 :\cb1 \
\cb3     \cf2 movie\cf4  = \cf2 dataset\cf4 [\cf2 title\cf4 ]\cb1 \
\cb3     \cf2 distance_to_point\cf4  = \cf2 distance\cf4 (\cf2 movie\cf4 , \cf2 unknown\cf4 )\cb1 \
\cb3     \cf8 #Adding the distance and point associated with that distance\cf4 \cb1 \
\cb3     \cf2 distances\cf4 .\cf6 append\cf4 ([\cf2 distance_to_point\cf4 , \cf2 title\cf4 ])\cb1 \
\cb3   \cf2 distances\cf4 .\cf6 sort\cf4 ()\cb1 \
\cb3   \cf8 #Taking only the k closest points\cf4 \cb1 \
\cb3   \cf2 neighbors\cf4  = \cf2 distances\cf4 [\cf2 0\cf4 :\cf2 k\cf4 ]\cb1 \
\cb3   \cf5 for\cf4  \cf2 neighbor \cf5 in\cf4  \cf2 neighbors\cf4 :\cb1 \
\cb3     \cf2 title\cf4 =\cf2 neighbor\cf4 [\cf2 1\cf4 ]\cb1 \
\
\cb3   \cf5 if\cf4  \cf2 labels\cf4 [\cf2 title\cf4 ]==\cf2 0\cf4 :\cb1 \
\cb3     \cf2 num_bad\cf4 +=\cf2 1\cf4 \cb1 \
\cb3   \cf5 elif \cf2 \cb3 labels\cf4 [\cf2 title\cf4 ]==\cf2 1:\cf4 \cb1 \
\cb3     \cf2 num_good\cf4 +=\cf2 1\cf4 \cb1 \
\
\cb3   \cf5 if\cf4  \cf2 num_good>num_bad\cf4 :\cb1 \
\cb3     \cf5 return\cf4  \cf2 1\cf4 \cb1 \
\cb3   \cf5 else\cf4 :\cb1 \
\cb3     \cf5 return\cf4  \cf2 0\
\cf4 \cb1 \
\cb3 print(\cf2 classify\cf4 ([\cf2 .4\cf4 , \cf2 .2\cf4 , \cf2 .9\cf4 ],\cf2 movie_dataset\cf4 ,\cf2 movie_labels\cf4 ,\cf2 5\cf4 ))\cb1 \
\cb3 \
\pard\pardeftab720\sl420\partightenfactor0

\f2\fs35\fsmilli17600 \cf9 \cb4 *** Our goal now is to count the number of good movies and bad movies in the list of neighbors. If more of the neighbors were good, then the algorithm will classify the unknown movie as good. Otherwise, it will classify it as bad.\
\
*** To begin, we want to make sure the movie that we want to classify isn\'92t already in our database. This is important because we don\'92t want one of the nearest neighbors to be itself!
\f1\fs28\fsmilli14080 \cf4 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \
\'97 \cf5 \cb3 from\cf4  \cf2 movies\cf4  \cf5 import\cf4  \cf2 movie_dataset\cf4 , \cf2 movie_labels\cf4 , \cf2 normalize_point\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 def distance\cf4 (\cf2 movie1\cf4 , \cf2 movie2\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 squared_difference\cf4  = \cf2 0\cf4 \cb1 \
\cb3   \cf5 for\cf4  \cf2 i\cf4  \cf5 in\cf4  range(len(\cf2 movie1\cf4 )):\cb1 \
\cb3     \cf2 squared_difference\cf4  += (\cf2 movie1\cf4 [\cf2 i\cf4 ] - \cf2 movie2\cf4 [\cf2 i\cf4 ]) ** \cf2 2\cf4 \cb1 \
\cb3   \cf2 final_distance\cf4  = \cf2 squared_difference\cf4  ** \cf2 0.5\cf4 \cb1 \
\cb3   \cf5 return\cf4  \cf2 final_distance\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 def classify\cf4 (\cf2 unknown\cf4 , \cf2 dataset\cf4 , \cf2 labels\cf4 , \cf2 k\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 distances\cf4  = []\cb1 \
\cb3   \cf8 #Looping through all points in the dataset\cf4 \cb1 \
\cb3   \cf5 for\cf4  \cf2 title\cf4  \cf5 in\cf4  \cf2 dataset\cf4 :\cb1 \
\cb3     \cf2 movie\cf4  = \cf2 dataset\cf4 [\cf2 title\cf4 ]\cb1 \
\cb3     \cf2 distance_to_point\cf4  = \cf2 distance\cf4 (\cf2 movie\cf4 , \cf2 unknown\cf4 )\cb1 \
\cb3     \cf8 #Adding the distance and point associated with that distance\cf4 \cb1 \
\cb3     \cf2 distances\cf4 .\cf6 append\cf4 ([\cf2 distance_to_point\cf4 , \cf2 title\cf4 ])\cb1 \
\cb3   \cf2 distances\cf4 .\cf6 sort\cf4 ()\cb1 \
\cb3   \cf8 #Taking only the k closest points\cf4 \cb1 \
\cb3   \cf2 neighbors\cf4  = \cf2 distances\cf4 [\cf2 0\cf4 :\cf2 k\cf4 ]\cb1 \
\cb3   \cf2 num_good\cf4  = \cf2 0\cf4 \cb1 \
\cb3   \cf2 num_bad\cf4  = \cf2 0\cf4 \cb1 \
\cb3   \cf5 for\cf4  \cf2 neighbor\cf4  \cf5 in\cf4  \cf2 neighbors\cf4 :\cb1 \
\cb3     \cf2 title\cf4  = \cf2 neighbor\cf4 [\cf2 1\cf4 ]\cb1 \
\cb3     \cf5 if\cf4  \cf2 labels\cf4 [\cf2 title\cf4 ] == \cf2 0\cf4 :\cb1 \
\cb3       \cf2 num_bad\cf4  += \cf2 1\cf4 \cb1 \
\cb3     \cf5 elif\cf4  \cf2 labels\cf4 [\cf2 title\cf4 ] == \cf2 1\cf4 :\cb1 \
\cb3       \cf2 num_good\cf4  += \cf2 1\cf4 \cb1 \
\cb3   \cf5 if\cf4  \cf2 num_good\cf4  \cf2 >\cf4  \cf2 num_bad\cf4 :\cb1 \
\cb3     \cf5 return\cf4  \cf2 1\cf4 \cb1 \
\cb3   \cf5 else\cf4 :\cb1 \
\cb3     \cf5 return\cf4  \cf2 0\cf4 \cb1 \
\
\cb3 print(\cf7 'Call Me By Your Name'\cf4  \cf5 in\cf4  \cf2 movie_dataset\cf4 )\cb1 \
\cf2 \cb3 my_movie\cf4  = [\cf2 3500000\cf4 ,\cf2 132\cf4 , \cf2 2017\cf4 ]\cb1 \
\
\cf2 \cb3 normalized_my_movie\cf4 = \cf2 normalize_point\cf4 (\cf2 my_movie\cf4 )\cb1 \
\
\cb3 print(\cf2 classify\cf4 (\cf2 normalized_my_movie\cf4 ,\cf2 movie_dataset\cf4 ,\cf2 movie_labels\cf4 ,\cf2 5\cf4 ))\cb1 \
\
\'97\cf5 \cb3 from\cf4  \cf2 movies\cf4  \cf5 import\cf4  \cf2 training_set\cf4 , \cf2 training_labels\cf4 , \cf2 validation_set\cf4 , \cf2 validation_labels\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 def distance\cf4 (\cf2 movie1\cf4 , \cf2 movie2\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 squared_difference\cf4  = \cf2 0\cf4 \cb1 \
\cb3   \cf5 for\cf4  \cf2 i\cf4  \cf5 in\cf4  range(len(\cf2 movie1\cf4 )):\cb1 \
\cb3     \cf2 squared_difference\cf4  += (\cf2 movie1\cf4 [\cf2 i\cf4 ] - \cf2 movie2\cf4 [\cf2 i\cf4 ]) ** \cf2 2\cf4 \cb1 \
\cb3   \cf2 final_distance\cf4  = \cf2 squared_difference\cf4  ** \cf2 0.5\cf4 \cb1 \
\cb3   \cf5 return\cf4  \cf2 final_distance\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 def classify\cf4 (\cf2 unknown\cf4 , \cf2 dataset\cf4 , \cf2 labels\cf4 , \cf2 k\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 distances\cf4  = []\cb1 \
\cb3   \cf8 #Looping through all points in the dataset\cf4 \cb1 \
\cb3   \cf5 for\cf4  \cf2 title\cf4  \cf5 in\cf4  \cf2 dataset\cf4 :\cb1 \
\cb3     \cf2 movie\cf4  = \cf2 dataset\cf4 [\cf2 title\cf4 ]\cb1 \
\cb3     \cf2 distance_to_point\cf4  = \cf2 distance\cf4 (\cf2 movie\cf4 , \cf2 unknown\cf4 )\cb1 \
\cb3     \cf8 #Adding the distance and point associated with that distance\cf4 \cb1 \
\cb3     \cf2 distances\cf4 .\cf6 append\cf4 ([\cf2 distance_to_point\cf4 , \cf2 title\cf4 ])\cb1 \
\cb3   \cf2 distances\cf4 .\cf6 sort\cf4 ()\cb1 \
\cb3   \cf8 #Taking only the k closest points\cf4 \cb1 \
\cb3   \cf2 neighbors\cf4  = \cf2 distances\cf4 [\cf2 0\cf4 :\cf2 k\cf4 ]\cb1 \
\cb3   \cf2 num_good\cf4  = \cf2 0\cf4 \cb1 \
\cb3   \cf2 num_bad\cf4  = \cf2 0\cf4 \cb1 \
\cb3   \cf5 for\cf4  \cf2 neighbor\cf4  \cf5 in\cf4  \cf2 neighbors\cf4 :\cb1 \
\cb3     \cf2 title\cf4  = \cf2 neighbor\cf4 [\cf2 1\cf4 ]\cb1 \
\cb3     \cf5 if\cf4  \cf2 labels\cf4 [\cf2 title\cf4 ] == \cf2 0\cf4 :\cb1 \
\cb3       \cf2 num_bad\cf4  += \cf2 1\cf4 \cb1 \
\cb3     \cf5 elif\cf4  \cf2 labels\cf4 [\cf2 title\cf4 ] == \cf2 1\cf4 :\cb1 \
\cb3       \cf2 num_good\cf4  += \cf2 1\cf4 \cb1 \
\cb3   \cf5 if\cf4  \cf2 num_good\cf4  \cf2 >\cf4  \cf2 num_bad\cf4 :\cb1 \
\cb3     \cf5 return\cf4  \cf2 1\cf4 \cb1 \
\cb3   \cf5 else\cf4 :\cb1 \
\cb3     \cf5 return\cf4  \cf2 0\cf4 \cb1 \
\cb3   \cb1 \
\cb3 print(\cf2 validation_set\cf4 [\cf7 "Bee Movie"\cf4 ])\cb1 \
\cb3 print(\cf2 validation_labels\cf4 [\cf7 "Bee Movie"\cf4 ])\cb1 \
\
\cf2 \cb3 guess\cf4 =\cf2 classify\cf4 (\cf2 validation_set\cf4 [\cf7 "Bee Movie"\cf4 ], \cf2 training_set\cf4 , \cf2 training_labels\cf4 , \cf2 5\cf4 )\cb1 \
\cb3 print(\cf2 guess\cf4 )\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 if\cf4  \cf2 guess\cf4  == \cf2 validation_labels\cf4 [\cf7 "Bee Movie"\cf4 ]:\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   print(\cf7 "Correct!"\cf4 )\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 else\cf4 :\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   print(\cf7 "Wrong!"\cf4 )\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0

\f2\fs35\fsmilli17600 \cf9 \cb4 \'97 
\f1\fs28\fsmilli14080 \cf5 \cb3 from\cf4  \cf2 movies\cf4  \cf5 import\cf4  \cf2 training_set\cf4 , \cf2 training_labels\cf4 , \cf2 validation_set\cf4 , \cf2 validation_labels\cf4 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 def distance\cf4 (\cf2 movie1\cf4 , \cf2 movie2\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 squared_difference\cf4  = \cf2 0\cf4 \cb1 \
\cb3   \cf5 for\cf4  \cf2 i\cf4  \cf5 in\cf4  range(len(\cf2 movie1\cf4 )):\cb1 \
\cb3     \cf2 squared_difference\cf4  += (\cf2 movie1\cf4 [\cf2 i\cf4 ] - \cf2 movie2\cf4 [\cf2 i\cf4 ]) ** \cf2 2\cf4 \cb1 \
\cb3   \cf2 final_distance\cf4  = \cf2 squared_difference\cf4  ** \cf2 0.5\cf4 \cb1 \
\cb3   \cf5 return\cf4  \cf2 final_distance\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 def classify\cf4 (\cf2 unknown\cf4 , \cf2 dataset\cf4 , \cf2 labels\cf4 , \cf2 k\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3   \cf2 distances\cf4  = []\cb1 \
\cb3   \cf8 #Looping through all points in the dataset\cf4 \cb1 \
\cb3   \cf5 for\cf4  \cf2 title\cf4  \cf5 in\cf4  \cf2 dataset\cf4 :\cb1 \
\cb3     \cf2 movie\cf4  = \cf2 dataset\cf4 [\cf2 title\cf4 ]\cb1 \
\cb3     \cf2 distance_to_point\cf4  = \cf2 distance\cf4 (\cf2 movie\cf4 , \cf2 unknown\cf4 )\cb1 \
\cb3     \cf8 #Adding the distance and point associated with that distance\cf4 \cb1 \
\cb3     \cf2 distances\cf4 .\cf6 append\cf4 ([\cf2 distance_to_point\cf4 , \cf2 title\cf4 ])\cb1 \
\cb3   \cf2 distances\cf4 .\cf6 sort\cf4 ()\cb1 \
\cb3   \cf8 #Taking only the k closest points\cf4 \cb1 \
\cb3   \cf2 neighbors\cf4  = \cf2 distances\cf4 [\cf2 0\cf4 :\cf2 k\cf4 ]\cb1 \
\cb3   \cf2 num_good\cf4  = \cf2 0\cf4 \cb1 \
\cb3   \cf2 num_bad\cf4  = \cf2 0\cf4 \cb1 \
\cb3   \cf5 for\cf4  \cf2 neighbor\cf4  \cf5 in\cf4  \cf2 neighbors\cf4 :\cb1 \
\cb3     \cf2 title\cf4  = \cf2 neighbor\cf4 [\cf2 1\cf4 ]\cb1 \
\cb3     \cf5 if\cf4  \cf2 labels\cf4 [\cf2 title\cf4 ] == \cf2 0\cf4 :\cb1 \
\cb3       \cf2 num_bad\cf4  += \cf2 1\cf4 \cb1 \
\cb3     \cf5 elif\cf4  \cf2 labels\cf4 [\cf2 title\cf4 ] == \cf2 1\cf4 :\cb1 \
\cb3       \cf2 num_good\cf4  += \cf2 1\cf4 \cb1 \
\cb3   \cf5 if\cf4  \cf2 num_good\cf4  \cf2 >\cf4  \cf2 num_bad\cf4 :\cb1 \
\cb3     \cf5 return\cf4  \cf2 1\cf4 \cb1 \
\cb3   \cf5 else\cf4 :\cb1 \
\cb3     \cf5 return\cf4  \cf2 0\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 def find_validation_accuracy\cf4 (\cf2 training_set\cf4 , \cf2 training_labels\cf4 , \cf2 validation_set\cf4 , \cf2 validation_labels\cf4 , \cf2 k\cf4 ):\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3     \cf2 num_correct\cf4 =\cf2 0\cf4 \cb1 \
\cb3     \cf5 for\cf4  \cf2 movie\cf4  \cf5 in\cf4  \cf2 validation_set\cf4 :\cb1 \
\cb3       \cf2 guess\cf4 =\cf2 classify\cf4 (\cf2 validation_set\cf4 [\cf2 movie\cf4 ],\cf2 training_set\cf4 , \cf2 training_labels\cf4 ,\cf2 k\cf4 )\cb1 \
\cb3       \cf5 if\cf4  \cf2 guess\cf4  == \cf2 validation_labels\cf4 [\cf2 movie\cf4 ]:\cb1 \
\cb3         \cf2 num_correct\cf4 +=\cf2 1\cf4 \cb1 \
\cb3     \cf5 return\cf4  \cf2 num_correct\cf4 /len(\cf2 validation_set\cf4 )\cb1 \
\
\cb3 print(\cf2 find_validation_accuracy\cf4 (\cf2 training_set\cf4 , \cf2 training_labels\cf4 , \cf2 validation_set\cf4 , \cf2 validation_labels\cf4 , \cf2 3\cf4 ))\cb1 \
\pard\pardeftab720\sl420\partightenfactor0

\f2\fs35\fsmilli17600 \cf9 \cb4 \
\
\'97 When\'a0
\f3\fs21\fsmilli10800 \cf10 \cb11 k
\f2\fs35\fsmilli17600 \cf9 \cb4 \'a0is small, overfitting occurs and the accuracy is relatively low. On the other hand, when\'a0
\f3\fs21\fsmilli10800 \cf10 \cb11 k
\f2\fs35\fsmilli17600 \cf9 \cb4 \'a0gets too large, underfitting occurs and accuracy starts to drop.\
\
\'97 
\f1\fs28\fsmilli14080 \cf5 \cb3 from\cf4  \cf2 movies\cf4  \cf5 import\cf4  \cf2 movie_dataset\cf4 , \cf2 labels\cf4 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 from\cf4  \cf2 sklearn\cf4 .\cf6 neighbors\cf4  \cf5 import\cf4  \cf2 KNeighborsClassifier\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 classifier\cf4  = \cf2 KNeighborsClassifier\cf4 (\cf2 n_neighbors\cf4  = \cf2 5\cf4 )\cb1 \
\cf2 \cb3 classifier\cf4 .\cf6 fit\cf4 (\cf2 movie_dataset\cf4 , \cf2 labels\cf4 )\cb1 \
\
\cf2 \cb3 guess\cf4 =\cf2 classifier\cf4 .\cf6 predict\cf4 ([[\cf2 .45\cf4 , \cf2 .2\cf4 , \cf2 .5\cf4 ], [\cf2 .25\cf4 , \cf2 .8\cf4 , \cf2 .9\cf4 ],[\cf2 .1\cf4 , \cf2 .1\cf4 , \cf2 .9\cf4 ]])\cb1 \
\cb3 print(\cf2 guess\cf4 )\cb1 \
\pard\pardeftab720\sl420\partightenfactor0

\f2\fs35\fsmilli17600 \cf9 \cb4 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\pardeftab720\sl420\partightenfactor0

\f1\fs28\fsmilli14080 \cf4 \cb3 \
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\cb1 \
}