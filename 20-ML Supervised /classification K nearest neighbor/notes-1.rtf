— two_d = [10, 2]
five_d = [30, -1, 50, 0, 2]
four_d=[1,25,32,40]

—def euclidean_distance(pt1,pt2):
  distance=0
  for i in range(len(pt1)):
    distance+=(pt1[i]-pt2[i])**2
  return distance**0.5


print(euclidean_distance([1,2],[4,0]))
print(euclidean_distance([5,4,3],[1,7,9]))


—def euclidean_distance(pt1, pt2):
  distance = 0
  for i in range(len(pt1)):
    distance += (pt1[i] - pt2[i]) ** 2
  return distance ** 0.5

print(euclidean_distance([1, 2], [4, 0]))
print(euclidean_distance([5, 4, 3], [1, 7, 9]))

def manhattan_distance(pt1, pt2):
  distance = 0
  for i in range(len(pt1)):
    distance += abs(pt1[i] - pt2[i])
  return distance

print(manhattan_distance([1, 2], [4, 0]))
print(manhattan_distance([5, 4, 3], [1, 7, 9]))

—def hamming_distance(pt1, pt2):
  distance = 0
  for i in range(len(pt1)):
    if pt1[i] != pt2[i]:
      distance+=1
  return distance

print(hamming_distance([1,2],[1,100]))
print(hamming_distance([5,4,9],[1,7,9]))


—from scipy.spatial import distance

print(distance.euclidean([1,2],[4,0]))
print(distance.cityblock([1,2],[4,0]))			Manhattan (city block) distance demek
print(distance.hamming([5,4,9],[1,7,9]))


—	Min-max normalization: Guarantees all features will have the exact same scale but does not handle outliers well.
		Z-score normalization: Handles outliers, but does not produce normalized data with the exact same scale.

































—
