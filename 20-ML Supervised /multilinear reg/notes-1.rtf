{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 Monaco;\f4\fnil\fcharset0 HelveticaNeue-Italic;}
{\colortbl;\red255\green255\blue255;\red164\green191\blue255;\red23\green23\blue23;\red255\green255\blue255;
\red252\green115\blue96;\red117\green255\blue242;\red254\green219\blue112;\red129\green131\blue134;\red56\green56\blue56;
\red17\green16\blue23;\red229\green227\blue232;}
{\*\expandedcolortbl;;\cssrgb\c70196\c80000\c100000;\cssrgb\c11765\c11765\c11765;\cssrgb\c100000\c100000\c100000;
\cssrgb\c100000\c53725\c45098;\cssrgb\c51373\c100000\c96078;\cssrgb\c100000\c87843\c51373;\cssrgb\c57647\c58431\c59608;\cssrgb\c28235\c28235\c28235;
\cssrgb\c8235\c7843\c12157;\cssrgb\c91765\c91373\c92941;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15100\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \'97 
\f1\fs28\fsmilli14080 \cf2 \cb3 \expnd0\expndtw0\kerning0
import\cf4  \cf5 codecademylib3_seaborn\cf4 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf2 \cb3 import\cf4  \cf5 pandas\cf4  \cf2 as\cf4  \cf5 pd\cf4 \cb1 \
\
\cf5 \cb3 streeteasy\cf4  = \cf5 pd\cf4 .\cf6 read_csv\cf4 (\cf7 \cb3 "https://raw.githubusercontent.com/sonnynomnom/Codecademy-Machine-Learning-Fundamentals/master/StreetEasy/queens.csv"\cf4 \cb3 )\cb1 \
\
\cf5 \cb3 df\cf4  = \cf5 pd\cf4 .\cf6 DataFrame\cf4 (\cf5 streeteasy\cf4 )\cb1 \
\
\cb3 print(\cf5 df\cf4 .\cf6 head\cf4 ())\cb1 \
\
\'97\cf2 \cb3 import\cf4  \cf5 codecademylib3_seaborn\cf4 \cb1 \
\cf2 \cb3 import\cf4  \cf5 pandas\cf4  \cf2 as\cf4  \cf5 pd\cf4 \cb1 \
\cf2 \cb3 from\cf4  \cf5 sklearn\cf4 .\cf6 model_selection\cf4  \cf2 import\cf4  \cf5 train_test_split\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf8 \cb3 # import train_test_split\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 streeteasy\cf4  = \cf5 pd\cf4 .\cf6 read_csv\cf4 (\cf7 \cb3 "https://raw.githubusercontent.com/sonnynomnom/Codecademy-Machine-Learning-Fundamentals/master/StreetEasy/manhattan.csv"\cf4 \cb3 )\cb1 \
\
\cf5 \cb3 df\cf4  = \cf5 pd\cf4 .\cf6 DataFrame\cf4 (\cf5 streeteasy\cf4 )\cb1 \
\
\cf5 \cb3 x\cf4  = \cf5 df\cf4 [[\cf7 \cb3 'bedrooms'\cf4 \cb3 , \cf7 \cb3 'bathrooms'\cf4 \cb3 , \cf7 \cb3 'size_sqft'\cf4 \cb3 , \cf7 \cb3 'min_to_subway'\cf4 \cb3 , \cf7 \cb3 'floor'\cf4 \cb3 , \cf7 \cb3 'building_age_yrs'\cf4 \cb3 , \cf7 \cb3 'no_fee'\cf4 \cb3 , \cf7 \cb3 'has_roofdeck'\cf4 \cb3 , \cf7 \cb3 'has_washer_dryer'\cf4 \cb3 , \cf7 \cb3 'has_doorman'\cf4 \cb3 , \cf7 \cb3 'has_elevator'\cf4 \cb3 , \cf7 \cb3 'has_dishwasher'\cf4 \cb3 , \cf7 \cb3 'has_patio'\cf4 \cb3 , \cf7 \cb3 'has_gym'\cf4 \cb3 ]]\cb1 \
\
\cf5 \cb3 y\cf4  = \cf5 df\cf4 [[\cf7 \cb3 'rent'\cf4 \cb3 ]]\cb1 \
\
\cf5 \cb3 x_train\cf4 , \cf5 x_test\cf4 , \cf5 y_train\cf4 , \cf5 y_test\cf4  = \cf5 train_test_split\cf4 (\cf5 x\cf4 , \cf5 y\cf4 , \cf5 train_size\cf4 =\cf5 0.8\cf4 , \cf5 test_size\cf4 =\cf5 0.2\cf4 , \cf5 random_state\cf4 =\cf5 6\cf4 )\cb1 \
\
\cb3 print(\cf5 x_train\cf4 .\cf6 shape\cf4 )\cb1 \
\cb3 print(\cf5 x_test\cf4 .\cf6 shape\cf4 )\cb1 \
\
\cb3 print(\cf5 y_train\cf4 .\cf6 shape\cf4 )\cb1 \
\cb3 print(\cf5 y_test\cf4 .\cf6 shape\cf4 )\cb1 \
\
\'97\cf2 \cb3 import\cf4  \cf5 codecademylib3_seaborn\cf4 \cb1 \
\cf2 \cb3 import\cf4  \cf5 matplotlib\cf4 .\cf6 pyplot\cf4  \cf2 as\cf4  \cf5 plt\cf4 \cb1 \
\cf2 \cb3 import\cf4  \cf5 pandas\cf4  \cf2 as\cf4  \cf5 pd\cf4 \cb1 \
\
\cf2 \cb3 from\cf4  \cf5 sklearn\cf4 .\cf6 model_selection\cf4  \cf2 import\cf4  \cf5 train_test_split\cf4 \cb1 \
\cf2 \cb3 from\cf4  \cf5 sklearn\cf4 .\cf6 linear_model\cf4  \cf2 import\cf4  \cf5 LinearRegression\cf4 \cb1 \
\
\
\cf5 \cb3 streeteasy\cf4  = \cf5 pd\cf4 .\cf6 read_csv\cf4 (\cf7 \cb3 "https://raw.githubusercontent.com/sonnynomnom/Codecademy-Machine-Learning-Fundamentals/master/StreetEasy/manhattan.csv"\cf4 \cb3 )\cb1 \
\
\cf5 \cb3 df\cf4  = \cf5 pd\cf4 .\cf6 DataFrame\cf4 (\cf5 streeteasy\cf4 )\cb1 \
\
\cf5 \cb3 x\cf4  = \cf5 df\cf4 [[\cf7 \cb3 'bedrooms'\cf4 \cb3 , \cf7 \cb3 'bathrooms'\cf4 \cb3 , \cf7 \cb3 'size_sqft'\cf4 \cb3 , \cf7 \cb3 'min_to_subway'\cf4 \cb3 , \cf7 \cb3 'floor'\cf4 \cb3 , \cf7 \cb3 'building_age_yrs'\cf4 \cb3 , \cf7 \cb3 'no_fee'\cf4 \cb3 , \cf7 \cb3 'has_roofdeck'\cf4 \cb3 , \cf7 \cb3 'has_washer_dryer'\cf4 \cb3 , \cf7 \cb3 'has_doorman'\cf4 \cb3 , \cf7 \cb3 'has_elevator'\cf4 \cb3 , \cf7 \cb3 'has_dishwasher'\cf4 \cb3 , \cf7 \cb3 'has_patio'\cf4 \cb3 , \cf7 \cb3 'has_gym'\cf4 \cb3 ]]\cb1 \
\
\cf5 \cb3 y\cf4  = \cf5 df\cf4 [[\cf7 \cb3 'rent'\cf4 \cb3 ]]\cb1 \
\
\cf5 \cb3 x_train\cf4 , \cf5 x_test\cf4 , \cf5 y_train\cf4 , \cf5 y_test\cf4  = \cf5 train_test_split\cf4 (\cf5 x\cf4 , \cf5 y\cf4 , \cf5 train_size\cf4  = \cf5 0.8\cf4 , \cf5 test_size\cf4  = \cf5 0.2\cf4 , \cf5 random_state\cf4 =\cf5 6\cf4 )\cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf8 \cb3 # Add the code here:\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 mlr\cf4  = \cf5 LinearRegression\cf4 ()\cb1 \
\
\cf5 \cb3 mlr\cf4 .\cf6 fit\cf4 (\cf5 x_train\cf4 , \cf5 y_train\cf4 ) \cb1 \
\cf5 \cb3 y_predict\cf4  = \cf5 mlr\cf4 .\cf6 predict\cf4 (\cf5 x_test\cf4 )\cb1 \
\
\cf5 \cb3 sonny_apartment\cf4  = [[\cf5 1\cf4 , \cf5 1\cf4 , \cf5 620\cf4 , \cf5 16\cf4 , \cf5 1\cf4 , \cf5 98\cf4 , \cf5 1\cf4 , \cf5 0\cf4 , \cf5 1\cf4 , \cf5 0\cf4 , \cf5 0\cf4 , \cf5 1\cf4 , \cf5 1\cf4 , \cf5 0\cf4 ]]\cb1 \
\
\cf5 \cb3 predict\cf4  = \cf5 mlr\cf4 .\cf6 predict\cf4 (\cf5 sonny_apartment\cf4 )\cb1 \
\
\cb3 print(\cf7 \cb3 "Predicted rent: $%.2f"\cf4 \cb3  % \cf5 predict\cf4 )\
\
\
\'97\cf2 import\cf4  \cf5 codecademylib3_seaborn\cf4 \cb1 \
\cf2 \cb3 import\cf4  \cf5 matplotlib\cf4 .\cf6 pyplot\cf4  \cf2 as\cf4  \cf5 plt\cf4 \cb1 \
\cf2 \cb3 import\cf4  \cf5 pandas\cf4  \cf2 as\cf4  \cf5 pd\cf4 \cb1 \
\
\cf2 \cb3 from\cf4  \cf5 sklearn\cf4 .\cf6 model_selection\cf4  \cf2 import\cf4  \cf5 train_test_split\cf4 \cb1 \
\cf2 \cb3 from\cf4  \cf5 sklearn\cf4 .\cf6 linear_model\cf4  \cf2 import\cf4  \cf5 LinearRegression\cf4 \cb1 \
\
\cf5 \cb3 streeteasy\cf4  = \cf5 pd\cf4 .\cf6 read_csv\cf4 (\cf7 \cb3 "https://raw.githubusercontent.com/sonnynomnom/Codecademy-Machine-Learning-Fundamentals/master/StreetEasy/manhattan.csv"\cf4 \cb3 )\cb1 \
\
\cf5 \cb3 df\cf4  = \cf5 pd\cf4 .\cf6 DataFrame\cf4 (\cf5 streeteasy\cf4 )\cb1 \
\
\cf5 \cb3 x\cf4  = \cf5 df\cf4 [[\cf7 \cb3 'bedrooms'\cf4 \cb3 , \cf7 \cb3 'bathrooms'\cf4 \cb3 , \cf7 \cb3 'size_sqft'\cf4 \cb3 , \cf7 \cb3 'min_to_subway'\cf4 \cb3 , \cf7 \cb3 'floor'\cf4 \cb3 , \cf7 \cb3 'building_age_yrs'\cf4 \cb3 , \cf7 \cb3 'no_fee'\cf4 \cb3 , \cf7 \cb3 'has_roofdeck'\cf4 \cb3 , \cf7 \cb3 'has_washer_dryer'\cf4 \cb3 , \cf7 \cb3 'has_doorman'\cf4 \cb3 , \cf7 \cb3 'has_elevator'\cf4 \cb3 , \cf7 \cb3 'has_dishwasher'\cf4 \cb3 , \cf7 \cb3 'has_patio'\cf4 \cb3 , \cf7 \cb3 'has_gym'\cf4 \cb3 ]]\cb1 \
\
\cf5 \cb3 y\cf4  = \cf5 df\cf4 [[\cf7 \cb3 'rent'\cf4 \cb3 ]]\cb1 \
\
\cf5 \cb3 x_train\cf4 , \cf5 x_test\cf4 , \cf5 y_train\cf4 , \cf5 y_test\cf4  = \cf5 train_test_split\cf4 (\cf5 x\cf4 , \cf5 y\cf4 , \cf5 train_size\cf4  = \cf5 0.8\cf4 , \cf5 test_size\cf4  = \cf5 0.2\cf4 , \cf5 random_state\cf4 =\cf5 6\cf4 )\cb1 \
\
\cf5 \cb3 lm\cf4  = \cf5 LinearRegression\cf4 ()\cb1 \
\
\cf5 \cb3 model\cf4 =\cf5 lm\cf4 .\cf6 fit\cf4 (\cf5 x_train\cf4 , \cf5 y_train\cf4 )\
print(\cf5 model\cf4 .\cf6 coef_\cf4 )\cb1 \
\cb3 print(\cf5 model\cf4 .\cf6 intercept_\cf4 )\cb1 \
\
\cf5 \cb3 y_predict\cf4  = \cf5 lm\cf4 .\cf6 predict\cf4 (\cf5 x_test\cf4 )\cb1 \
\
\cf5 \cb3 plt\cf4 .\cf6 scatter\cf4 (\cf5 y_test\cf4 ,\cf5 y_predict\cf4 )\cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf8 \cb3 # Create x-axis label and y-axis label\cf4 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 plt\cf4 .\cf6 xlabel\cf4 (\cf7 \cb3 "actual prices"\cf4 \cb3 )\cb1 \
\cf5 \cb3 plt\cf4 .\cf6 ylabel\cf4 (\cf7 \cb3 "predicted prices"\cf4 \cb3 )\cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf8 \cb3 # Create a title\cf4 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 plt\cf4 .\cf6 title\cf4 (\cf7 \cb3 "actual vs predicted"\cf4 \cb3 )\cb1 \
\cf5 \cb3 plt\cf4 .\cf6 show\cf4 ()\cb1 \
\cb3 \'97\cf2 import\cf4  \cf5 codecademylib3_seaborn\cf4 \cb1 \
\cf2 \cb3 import\cf4  \cf5 matplotlib\cf4 .\cf6 pyplot\cf4  \cf2 as\cf4  \cf5 plt\cf4 \cb1 \
\cf2 \cb3 import\cf4  \cf5 pandas\cf4  \cf2 as\cf4  \cf5 pd\cf4 \cb1 \
\
\cf2 \cb3 from\cf4  \cf5 sklearn\cf4 .\cf6 model_selection\cf4  \cf2 import\cf4  \cf5 train_test_split\cf4 \cb1 \
\cf2 \cb3 from\cf4  \cf5 sklearn\cf4 .\cf6 linear_model\cf4  \cf2 import\cf4  \cf5 LinearRegression\cf4 \cb1 \
\
\cf5 \cb3 streeteasy\cf4  = \cf5 pd\cf4 .\cf6 read_csv\cf4 (\cf7 \cb3 "https://raw.githubusercontent.com/sonnynomnom/Codecademy-Machine-Learning-Fundamentals/master/StreetEasy/manhattan.csv"\cf4 \cb3 )\cb1 \
\
\cf5 \cb3 df\cf4  = \cf5 pd\cf4 .\cf6 DataFrame\cf4 (\cf5 streeteasy\cf4 )\cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf8 \cb3 # Input code here:\cf4 \cb1 \
\
\cf8 \cb3 #plt.scatter(df[['size_sqft']], df[['rent']], alpha=0.4)\cf4 \cb1 \
\cf8 \cb3 #plt.scatter(df[['min_to_subway']], df[['rent']], alpha=0.4)\cf4 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf5 \cb3 plt\cf4 .\cf6 scatter\cf4 (\cf5 df\cf4 [[\cf7 \cb3 'has_doorman'\cf4 \cb3 ]], \cf5 df\cf4 [[\cf7 \cb3 'rent'\cf4 \cb3 ]], \cf5 alpha\cf4 =\cf5 0.4\cf4 )\cb1 \
\cf5 \cb3 plt\cf4 .\cf6 show\cf4 ()\cb1 \
\cb3 \
\
\'97
\f2\fs35\fsmilli17600 \cf9 \cb4 R\'b2 is the percentage variation in y explained by all the x variables together.\
\pard\pardeftab720\sl560\sa240\partightenfactor0
\cf9 For example, say we are trying to predict\'a0
\f3\fs21\fsmilli10800 \cf10 \cb11 rent
\f2\fs35\fsmilli17600 \cf9 \cb4 \'a0based on the\'a0
\f3\fs21\fsmilli10800 \cf10 \cb11 size_sqft
\f2\fs35\fsmilli17600 \cf9 \cb4 \'a0and the\'a0
\f3\fs21\fsmilli10800 \cf10 \cb11 bedrooms
\f2\fs35\fsmilli17600 \cf9 \cb4 \'a0in the apartment and the R\'b2 for our model is 0.72 \'97 that means that all the x variables (square feet and number of bedrooms) together explain 72% variation in y (
\f3\fs21\fsmilli10800 \cf10 \cb11 rent
\f2\fs35\fsmilli17600 \cf9 \cb4 ).\
Now let\'92s say we add another x variable, building\'92s age, to our model. By adding this third relevant x variable, the R\'b2 is expected to go up. Let say the new R\'b2 is 0.95. This means that square feet, number of bedrooms and age of the building\'a0
\f4\i together
\f2\i0 \'a0explain 95% of the variation in the rent.\
\pard\pardeftab720\sl560\partightenfactor0
\cf9 The best possible R\'b2 is 1.00 (and it can be negative because the model can be arbitrarily worse). Usually, a R\'b2 of 0.70 is considered good.\
\pard\pardeftab720\sl440\partightenfactor0

\f1\fs28\fsmilli14080 \cf4 \cb3 \
\
\'97 \cf2 import\cf4  \cf5 codecademylib3_seaborn\cf4 \cb1 \
\cf2 \cb3 import\cf4  \cf5 matplotlib\cf4 .\cf6 pyplot\cf4  \cf2 as\cf4  \cf5 plt\cf4 \cb1 \
\cf2 \cb3 import\cf4  \cf5 pandas\cf4  \cf2 as\cf4  \cf5 pd\cf4 \cb1 \
\
\cf2 \cb3 from\cf4  \cf5 sklearn\cf4 .\cf6 model_selection\cf4  \cf2 import\cf4  \cf5 train_test_split\cf4 \cb1 \
\cf2 \cb3 from\cf4  \cf5 sklearn\cf4 .\cf6 linear_model\cf4  \cf2 import\cf4  \cf5 LinearRegression\cf4 \cb1 \
\
\cf5 \cb3 streeteasy\cf4  = \cf5 pd\cf4 .\cf6 read_csv\cf4 (\cf7 \cb3 "https://raw.githubusercontent.com/sonnynomnom/Codecademy-Machine-Learning-Fundamentals/master/StreetEasy/manhattan.csv"\cf4 \cb3 )\cb1 \
\
\cf5 \cb3 df\cf4  = \cf5 pd\cf4 .\cf6 DataFrame\cf4 (\cf5 streeteasy\cf4 )\cb1 \
\
\cf5 \cb3 x\cf4  = \cf5 df\cf4 [[\cf7 \cb3 'bedrooms'\cf4 \cb3 , \cf7 \cb3 'bathrooms'\cf4 \cb3 , \cf7 \cb3 'size_sqft'\cf4 \cb3 , \cf7 \cb3 'min_to_subway'\cf4 \cb3 , \cf7 \cb3 'floor'\cf4 \cb3 , \cf7 \cb3 'building_age_yrs'\cf4 \cb3 , \cf7 \cb3 'no_fee'\cf4 \cb3 , \cf7 \cb3 'has_roofdeck'\cf4 \cb3 , \cf7 \cb3 'has_washer_dryer'\cf4 \cb3 , \cf7 \cb3 'has_doorman'\cf4 \cb3 , \cf7 \cb3 'has_elevator'\cf4 \cb3 , \cf7 \cb3 'has_dishwasher'\cf4 \cb3 , \cf7 \cb3 'has_patio'\cf4 \cb3 , \cf7 \cb3 'has_gym'\cf4 \cb3 ]]\cb1 \
\
\cf5 \cb3 y\cf4  = \cf5 df\cf4 [[\cf7 \cb3 'rent'\cf4 \cb3 ]]\cb1 \
\
\cf5 \cb3 x_train\cf4 , \cf5 x_test\cf4 , \cf5 y_train\cf4 , \cf5 y_test\cf4  = \cf5 train_test_split\cf4 (\cf5 x\cf4 , \cf5 y\cf4 , \cf5 train_size\cf4  = \cf5 0.8\cf4 , \cf5 test_size\cf4  = \cf5 0.2\cf4 , \cf5 random_state\cf4 =\cf5 6\cf4 )\cb1 \
\
\cf5 \cb3 mlr\cf4  = \cf5 LinearRegression\cf4 ()\cb1 \
\
\cf5 \cb3 model\cf4 =\cf5 mlr\cf4 .\cf6 fit\cf4 (\cf5 x_train\cf4 , \cf5 y_train\cf4 )\cb1 \
\
\cf5 \cb3 y_predict\cf4  = \cf5 mlr\cf4 .\cf6 predict\cf4 (\cf5 x_test\cf4 )\cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf8 \cb3 # Input code here:\cf4 \cb1 \
\
\cf8 \cb3 # train R2 si\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3 print(\cf7 \cb3 "Train score:"\cf4 \cb3 )\cb1 \
\cb3 print(\cf5 mlr\cf4 .\cf6 score\cf4 (\cf5 x_train\cf4 , \cf5 y_train\cf4 ))\cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf8 \cb3 # test R2 si\cf4 \cb1 \
\
\pard\pardeftab720\sl440\partightenfactor0
\cf4 \cb3 print(\cf7 \cb3 "Test score:"\cf4 \cb3 )\cb1 \
\cb3 print(\cf5 mlr\cf4 .\cf6 score\cf4 (\cf5 x_test\cf4 , \cf5 y_test\cf4 ))\cb1 \
\
\cf5 \cb3 residuals\cf4  = \cf5 y_predict\cf4  - \cf5 y_test\cf4 \cb1 \
\
\cf5 \cb3 plt\cf4 .\cf6 scatter\cf4 (\cf5 y_predict\cf4 , \cf5 residuals\cf4 , \cf5 alpha\cf4 =\cf5 0.4\cf4 )\cb1 \
\cf5 \cb3 plt\cf4 .\cf6 title\cf4 (\cf7 \cb3 'Residual Analysis'\cf4 \cb3 )\cb1 \
\
\cf5 \cb3 plt\cf4 .\cf6 show\cf4 ()\cb1 \
\cb3 \
\
\
\'97\cf2 import\cf4  \cf5 codecademylib3_seaborn\cf4 \cb1 \
\cf2 \cb3 import\cf4  \cf5 matplotlib\cf4 .\cf6 pyplot\cf4  \cf2 as\cf4  \cf5 plt\cf4 \cb1 \
\cf2 \cb3 import\cf4  \cf5 pandas\cf4  \cf2 as\cf4  \cf5 pd\cf4 \cb1 \
\
\cf2 \cb3 from\cf4  \cf5 sklearn\cf4 .\cf6 model_selection\cf4  \cf2 import\cf4  \cf5 train_test_split\cf4 \cb1 \
\cf2 \cb3 from\cf4  \cf5 sklearn\cf4 .\cf6 linear_model\cf4  \cf2 import\cf4  \cf5 LinearRegression\cf4 \cb1 \
\cf2 \cb3 from\cf4  \cf5 sklearn\cf4 .\cf6 metrics\cf4  \cf2 import\cf4  \cf5 mean_squared_error\cf4 \cb1 \
\
\cf5 \cb3 streeteasy\cf4  = \cf5 pd\cf4 .\cf6 read_csv\cf4 (\cf7 \cb3 "https://raw.githubusercontent.com/sonnynomnom/Codecademy-Machine-Learning-Fundamentals/master/StreetEasy/manhattan.csv"\cf4 \cb3 )\cb1 \
\
\cf5 \cb3 df\cf4  = \cf5 pd\cf4 .\cf6 DataFrame\cf4 (\cf5 streeteasy\cf4 )\cb1 \
\
\cf5 \cb3 x\cf4  = \cf5 df\cf4 [[\cf7 \cb3 'bedrooms'\cf4 \cb3 , \cf7 \cb3 'bathrooms'\cf4 \cb3 , \cf7 \cb3 'size_sqft'\cf4 \cb3 , \cf7 \cb3 'min_to_subway'\cf4 \cb3 , \cf7 \cb3 'floor'\cf4 \cb3 , \cf7 \cb3 'building_age_yrs'\cf4 \cb3 , \cf7 \cb3 'no_fee'\cf4 \cb3 , \cf7 \cb3 'has_roofdeck'\cf4 \cb3 , \cf7 \cb3 'has_washer_dryer'\cf4 \cb3 , \cf7 \cb3 'has_doorman'\cf4 \cb3 , \cf7 \cb3 'has_elevator'\cf4 \cb3 , \cf7 \cb3 'has_dishwasher'\cf4 \cb3 , \cf7 \cb3 'has_patio'\cf4 \cb3 , \cf7 \cb3 'has_gym'\cf4 \cb3 ]]\cb1 \
\
\cf5 \cb3 y\cf4  = \cf5 df\cf4 [[\cf7 \cb3 'rent'\cf4 \cb3 ]]\cb1 \
\
\cf5 \cb3 x_train\cf4 , \cf5 x_test\cf4 , \cf5 y_train\cf4 , \cf5 y_test\cf4  = \cf5 train_test_split\cf4 (\cf5 x\cf4 , \cf5 y\cf4 , \cf5 train_size\cf4  = \cf5 0.8\cf4 , \cf5 test_size\cf4  = \cf5 0.2\cf4 , \cf5 random_state\cf4 =\cf5 6\cf4 )\cb1 \
\
\cf5 \cb3 lm\cf4  = \cf5 LinearRegression\cf4 ()\cb1 \
\
\cf5 \cb3 model\cf4  = \cf5 lm\cf4 .\cf6 fit\cf4 (\cf5 x_train\cf4 , \cf5 y_train\cf4 )\cb1 \
\
\cb3 print(\cf5 model\cf4 .\cf6 coef_\cf4 )\cb1 \
\
\cf5 \cb3 y_predict\cf4 = \cf5 lm\cf4 .\cf6 predict\cf4 (\cf5 x_test\cf4 )\cb1 \
\
\cb3 print(\cf7 \cb3 "Train score:"\cf4 \cb3 )\cb1 \
\cb3 print(\cf5 lm\cf4 .\cf6 score\cf4 (\cf5 x_train\cf4 , \cf5 y_train\cf4 ))\cb1 \
\
\cb3 print(\cf7 \cb3 "Test score:"\cf4 \cb3 )\cb1 \
\cb3 print(\cf5 lm\cf4 .\cf6 score\cf4 (\cf5 x_test\cf4 , \cf5 y_test\cf4 ))\cb1 \
\
\cf5 \cb3 plt\cf4 .\cf6 scatter\cf4 (\cf5 y_test\cf4 , \cf5 y_predict\cf4 )\cb1 \
\cf5 \cb3 plt\cf4 .\cf6 plot\cf4 (range(\cf5 20000\cf4 ), range(\cf5 20000\cf4 ))\cb1 \
\
\cf5 \cb3 plt\cf4 .\cf6 xlabel\cf4 (\cf7 \cb3 "Prices: $Y_i$"\cf4 \cb3 )\cb1 \
\cf5 \cb3 plt\cf4 .\cf6 ylabel\cf4 (\cf7 \cb3 "Predicted prices: $\\hat\{Y\}_i$"\cf4 \cb3 )\cb1 \
\cf5 \cb3 plt\cf4 .\cf6 title\cf4 (\cf7 \cb3 "Actual Rent vs Predicted Rent"\cf4 \cb3 )\cb1 \
\
\cf5 \cb3 plt\cf4 .\cf6 show\cf4 ()\cb1 \
\cb3 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\cb1 \
}