
 labels = [1, 0, 0, 1, 1, 1, 0, 1, 1, 1]
guesses = [0, 1, 1, 1, 1, 0, 1, 0, 1, 0]
print(accuracy_score(labels,guesses))
print(recall_score(labels,guesses))
print(precision_score(labels,guesses))
print(f1_score(labels,guesses))

Elimizdek kar yagan gunler(1) ve yaptigimiz tahminler var

1-Accuracy
Dogru tahminleri (hem kar yagacak hem de yagmayacak yönündeki) toplam tahmin sayisina bölmekteyiz.(3/10)
Accuracy measures how many classifications your algorithm got correct out of every classification it made.

2-recall
Kar yagacak diye dogru tahmin ettiklerimizi gercekte kar yagan günlere boluyoruz. (3/7)
Recall measures the percentage of the relevant items your classifier was able to successfully find.

3-precison
Kar yagacak diye dogru tahmin ettiklerimizi tahminimizdeki kar yagan günlere boluyoruz. (3/6)
Precision measures the percentage of items your classifier found that were actually relevant.

** Precision and recall are statistics that are on opposite ends of a scale. If one goes down, the other will go up.

4-f1
 It is useful to consider the precision and recall of an algorithm, however, we still don’t have one number that can sufficiently describe how effective our algorithm is. This is the job of the F1 score F1 score is the harmonic mean of precision and recall. 

f_1=2*((precision*recall)/(precision+recall))


— labels = [1, 0, 0, 1, 1, 1, 0, 1, 1, 1]
guesses = [0, 1, 1, 1, 1, 0, 1, 0, 1, 0]

true_positives=0
true_negatives=0
false_positives=0
false_negatives=0

for i in range(len(labels)):
  if labels[i]==guesses[i]&guesses[i]==1:
    true_positives+=1
  elif labels[i]==guesses[i]&guesses[i]==0:
    true_negatives+=1
  elif labels[i]!=guesses[i]&guesses[i]==1:
    false_positives+=1
  elif labels[i]!=guesses[i]&guesses[i]==0:
    false_negatives+=1

accuracy=(true_positives+true_negatives)/(true_positives+true_negatives+false_positives+false_negatives)

print(accuracy)

— labels = [1, 0, 0, 1, 1, 1, 0, 1, 1, 1]
guesses = [0, 1, 1, 1, 1, 0, 1, 0, 1, 0]

true_positives = 0
true_negatives = 0
false_positives = 0
false_negatives = 0

for i in range(len(guesses)):
  #True Positives
  if labels[i] == 1 and guesses[i] == 1:
    true_positives += 1
  #True Negatives
  if labels[i] == 0 and guesses[i] == 0:
    true_negatives += 1
  #False Positives
  if labels[i] == 0 and guesses[i] == 1:
    false_positives += 1
  #False Negatives
  if labels[i] == 1 and guesses[i] == 0:
    false_negatives += 1
    
accuracy = (true_positives + true_negatives) / len(guesses)
print(accuracy)

recall=true_positives/(true_positives + false_negatives)

print(recall)

—labels = [1, 0, 0, 1, 1, 1, 0, 1, 1, 1]
guesses = [0, 1, 1, 1, 1, 0, 1, 0, 1, 0]

true_positives = 0
true_negatives = 0
false_positives = 0
false_negatives = 0

for i in range(len(guesses)):
  #True Positives
  if labels[i] == 1 and guesses[i] == 1:
    true_positives += 1
  #True Negatives
  if labels[i] == 0 and guesses[i] == 0:
    true_negatives += 1
  #False Positives
  if labels[i] == 0 and guesses[i] == 1:
    false_positives += 1
  #False Negatives
  if labels[i] == 1 and guesses[i] == 0:
    false_negatives += 1
    
accuracy = (true_positives + true_negatives) / len(guesses)
print(accuracy)

recall = true_positives / (true_positives + false_negatives)
print(recall)

precision= true_positives / (true_positives + false_positives)

print(precision)

— labels = [1, 0, 0, 1, 1, 1, 0, 1, 1, 1]
guesses = [0, 1, 1, 1, 1, 0, 1, 0, 1, 0]

true_positives = 0
true_negatives = 0
false_positives = 0
false_negatives = 0

for i in range(len(guesses)):
  #True Positives
  if labels[i] == 1 and guesses[i] == 1:
    true_positives += 1
  #True Negatives
  if labels[i] == 0 and guesses[i] == 0:
    true_negatives += 1
  #False Positives
  if labels[i] == 0 and guesses[i] == 1:
    false_positives += 1
  #False Negatives
  if labels[i] == 1 and guesses[i] == 0:
    false_negatives += 1
    
accuracy = (true_positives + true_negatives) / len(guesses)
print(accuracy)

recall = true_positives / (true_positives + false_negatives)
print(recall)

precision = true_positives / (true_positives + false_positives)
print(precision)

f_1=2*((precision*recall)/(precision+recall))
print(f_1)


